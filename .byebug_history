continue
@code
next
@code
next
@code
parent.left == self
parent
continue
Node.parent(Node.parent(self))
Node.parent(self)
self.parent
self
continue
parent
@code
continue
@code
parent.right == self
parent.left == self
parent
continue
@code
parent.left == self
parent
continue
@code
parent.left == self
parent
continue
b_node
Node.all.select {|n| n if n.left == b_node}
Node.all.select {|n| n if n.right == b_node}
continue
Node.all.select do
Node.all.select {|n| n if n.left == b_node}
Node.all.select {|n| n if n.right == b_node}
Node.all.select {|n| n if n.right == b_node || n.left == b_node}
Node.select {|n| n if n.right == b_node || n.left == b_node}
Node.parent(b_node)
cb_node
b_node
continue
Node.all
b_node
cb_node
parent
continue
max_node
continue
y
x
next
y
x
next
final_node
next
Node.all
final_node
next
y
x
next
Node.all
final_node
continue
puts "a\nb"
print "a\nb"
p bc.visualize
bc.visualize
continue
bc.visualize
bc.left
bc
